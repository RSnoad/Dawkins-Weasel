import re
import random
from Dawkins_Weasel import startingString
from Dawkins_Weasel import copiesString

def test_CanCreateStringOfLength28():
    assert len(startingString()) == 28

def test_GeneratedStringOnlyContainsCapitalLettersandSpaces():
    regex = re.compile(r'[^A-Z ]')
    filtered = regex.search(startingString())
    if filtered:
        assert filtered.group() == ''

# Test to see if string is 'randomly' generated by forcing a specific seed.
# The forcing a seed method may class as testing implementation rather than behaviour ie. test would
# need to be rewritten if we stopped using the random library and replaced it with something else.
# This test will also need to be changed if the length of the string or properties of the string are changed.
def test_CanGenerateARandomString():
    random.seed(100)
    assert startingString() == "DMUTTLVOCMBZZJIUFEFJQ FZOYWE"
    random.seed(200)
    assert startingString() == "BFTDXHALEAHMFXISJCLSNRDDDNXK"
    random.seed(300)
    assert startingString() == "QJAJWLPELJDGCXNNUSIXPZHJBVQV"

# Alternative implementation of a test the checks if the string is generated randomly. This test does not have
# the same issues that the above test has, however it is still a flawed test in that
# there is a small chance that it will fail when it should have passed.
def test_CanGenerateARandomStringSecondTest():
    string1 = startingString()
    string2 = startingString()
    string3 = startingString()
    string4 = startingString()
    string5 = startingString()
    # Believe this is equivalent to (string1 == string2) and (string2 == string3) etc.
    assert not string1 == string2 == string3 == string4 == string5

def test_CanMake100CopiesOfGeneratedString():
    copies = copiesString()
    assert all(i == copies[0] for i in copies)

def test_CanMutateTheGeneratedString():
    random.seed(100)
    mutatedList = mutate()
    assert mutatedList[1] == "string to be determined"
    assert mutatedList[1] == "string to be determined"
    assert mutatedList[1] == "string to be determined"
